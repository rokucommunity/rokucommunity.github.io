---
import type { MDXInstance } from 'astro';
import Footer from './Footer.astro';
import './github-markdown.css';

export interface Props {
    title: string;
}

const { frontmatter } = Astro.props;

const allPosts = (await Astro.glob('/src/pages/whats-new/**/*.mdx'))
    // Exclude the readme and any .md files starting with "_".
    .filter(
        (p) =>
            !p.file.includes('readme.md') &&
            !p.file.split('/').pop()?.startsWith('_')
    )
    // Reverse to show last three posts
    .reverse();

const thisPost = allPosts.find(
    (p) => p.file === frontmatter.file
) as MDXInstance<Record<string, any>>;
interface Post {
    title: string;
    url: string | undefined;
    isCurrent: boolean;
}
const posts = new Map<string, Post>();

for (const post of allPosts) {
    const fileArray = post.file.split('/');
    // Remove file name
    fileArray.pop();

    //add an empty year entry
    posts.set(post.frontmatter.date, {
        title: post.frontmatter.date,
        url: post.url!,
        isCurrent: thisPost.file === post.file
    });
}

const headings = thisPost?.getHeadings().filter((h) => h.depth < 3) ?? [];
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>{frontmatter.date}</title>
    </head>
    <body>
        <div class="flex flex-row">
            <div class="p-11">
                <p style="font-size: 1.6em">What's new</p>
                <ol>
                    {
                        [...posts].map(([, post]) => (
                            <li class="pl-3">
                                <a
                                    href={post.url}
                                    style={`
                                        text-decoration: ${
                                            post.isCurrent
                                                ? 'underline'
                                                : 'none'
                                        };
                                        font-weight: ${
                                            post.isCurrent ? 'bold' : 'none'
                                        };
                                    `}>
                                    {post.title}
                                </a>
                            </li>
                        ))
                    }
                </ol>
            </div>
            <div class="markdown-body">
                <slot />
            </div>
            <div class="p-11">
                <p>In this page</p>
                <ol>
                    {
                        headings.map((h) => (
                            <li style={`padding-left: ${8 * (h.depth - 1)}px;`}>
                                <a href={`#${h.slug}`}>{h.text}</a>
                            </li>
                        ))
                    }
                </ol>
            </div>
        </div>
        <Footer />
        <style>
            .markdown-body {
                box-sizing: border-box;
                min-width: 200px;
                max-width: 980px;
                padding: 45px;
            }

            @media (max-width: 767px) {
                .markdown-body {
                    padding: 15px;
                }
            }
        </style>
    </body>
</html>
